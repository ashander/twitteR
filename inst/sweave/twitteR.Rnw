\documentclass[letter]{article}
%\VignetteIndexEntry{Twitter client for R}
%\VignettePackage{twitteR}
%\VignetteKeywords{Documentation}
\usepackage{url}
\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}
\newcommand{\Rmethod}[1]{{\texttt{#1}}}
\newcommand{\Rfunarg}[1]{{\texttt{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}

\begin{document}

\title{Twitter client for R}
\author{Jeff Gentry}
\maketitle

\section{Introduction}

Twitter is a popular service that allows users to broadcast short
messages ('\emph{tweets}') for others to read.  These can be used to
communicate wtih friends, to display headlines, for restaurants to
list daily specials, and more.  The \Rpackage{twitteR} package is
intended to provide access to the Twitter API within R.  Users can make 
access large amounts of Twitter  data for data mining and other tasks.  

This package is intended to be combined with the \Rpackage{ROAuth} package
as as of March 2013 the Twitter API requires the use of OAuth authentication.

\section{Some Initial Notes}

\subsection{Support mailing list}

While this package doesn't generate a huge volume of emails to me, I
have found that the same questions tends to come up repeatedly (often
when something has been broken!). I also field requests for advice on
practical application of this package which is an area that I'm far
from expert at.  I've set up a mailing list to better manage emails from users as this way,
with the idea being that there'll now be a searchable archive and
perhaps other users might be able to chime in.  The URL for this
mailing list is \url{http://lists.hexdump.org/listinfo.cgi/twitter-users-hexdump.org}

\subsection{Notes on API coverage}

The ultimate goal is to provide full coverage of the Twitter API, although
this is not currently the case.  Aspects of the API will be added over
time, although if there are particular places that you find missing,
please contact me. Please take a look at Twitter's documentation on the 1.1 
API for more information on what is possible. For most actions, \Robject{twitteR}
either supports the options presented there or provides a superset of that
functionality (via processing in R). The API documentation is available at 
\url{https://dev.twitter.com/docs/api/1.1}.

I've long neglected Twitter's streaming API and someone else has picked up my
slack with the \Rpackage{streamR} package.

\section{Authentication with OAuth}

As of March 2013 OAuth authentication is \emph{required} for all Twitter
transactions. You will need to follow these instructions to continue.

OAuth is an authentication mechanism gaining popularity which allows
applications to provide client functionality to a web service without
granting an end user's credentials to the client itself.  This causes
a few wrinkles for cases like ours, where we're accessing Twitter 
programatically.  The \Rpackage{ROAuth} package can be used to get around
this issue.

The first step is to create a Twitter application for yourself.  Go to
\url{https://twitter.com/apps/new} and log in. After filling in the
basic info, go to the ``Settings'' tab and select "Read, Write and Access direct messages".
Make sure to click on the save button after doing this. In the
``Details'' tab, take note of your consumer key and consumer secret.

In your R session, you'll want to do the following:

<<ROAuth,eval=FALSE>>=
   cred = getTwitterOAuth(YOURKEY, YOURSECRET)
@

During this process, you'll be prompted with another URL, go to that URL with 
your browser and you'll be asked to approve the connection for this 
application.  Once you do this, you'll be presented with a PIN, enter 
that into your R session.  Your object is now verified.  

To use this token in future sessions, save \Robject{cred} to a file,
and from there you can use \Rfunction{load} in another session and call
\Rfunction{registerTwitterOAuth}:

<<RegisterOAuth,eval=FALSE>>=
   registerTwitterOAuth(cred)
@

\section{Getting Started}

This document is intended to demonstrate basic techniques rather than
an exhaustive tour of the functionality. For more in depth examples I
recommend exploring the mailing list or StackOverflow. I've also included
some links to examples of \Robject{twitteR} being used in the real word
at the end.

<<initialize>>=
library(twitteR)
@

<<auth, echo=FALSE>>=
load("credTwit.rda")
registerTwitterOAuth(cred)
@

\section{Exploring Twitter}
\subsection{Searching Twitter}

The \Rfunction{searchTwitter} function can be used to search for
tweets that match a desired term.  Example searches are such things as hashtags,
@usernames, and other such things which can also be manipulated with
basic boolean logic such as AND and OR.  The \Rfunarg{n} argument
can be used to specify the number of tweets to return, defaulting to 25.

<<search>>=
   sea <- searchTwitter('#twitter', n=50)
   sea[1:5]
@

\subsection{Looking at users}

To take a closer look at a Twitter user (including yourself!), run the
command \Rfunction{getUser}.  This will only work correctly with users
who have their profiles public, or if you're authenticated and granted
access. You can also see things such as a user's followers, who they
follow, retweets, and more.

<<getUser>>=
   crantastic <- getUser('crantastic')
   crantastic$getFriends(n=5)
   crantastic$getFavorites(n=5)
@

\subsection{Trends}

Twitter keeps track of topics that are popular at any given point of time,
and allows one to extract that data. The \Rfunction{getTrends} function is 
used to pull current trend information from a given location, which is specified
using a WOEID (see \url{http://developer.yahoo.com/geo/geoplanet/}). Luckily
there are two other functions to help you identify WOEIDs that you might be 
interested in. The \Rfunction{availableTrendLocations} function will return
a \Robject{data.frame} with a location in each row and the \Robject{woeid} giving
that location's WOEID. Similarly the \Rfunction{closestTrendLocations} function
is passed a latitude and longitude and will return the same style \Robject{data.frame}.

<<trends>>=
  availTrends = availableTrendLocations()
  head(availTrends)
  closeTrends = closestTrendLocations(-42.8, -71.1)
  head(closeTrends)
  trends = getTrends(2367105)
  head(trends)
@

\subsection{Timelines}
A Twitter \emph{timeline} is simply a stream of tweets. We support two
timelines, the \emph{user timeline} and the \emph{home timeline}. The former 
provides the most recent tweets of a specified user while the latter is used
to display your own most recent tweets. These both return a list of \Rclass{status}
objects.

To look at a particular user's timeline that user must either have a public
account or you must have access to their account. You can either pass in the
user's name or an object of class \Rclass{user} (more on this
later).  For this example, let's use the user \emph{cranatic}.

<<userTimeline>>=
   cranTweets <- userTimeline('cranatic')
   cranTweets[1:5]
@

By default this command returns the 20 most recent tweet.  
As with most (but not all) of the functions, it also provides a mechanism 
to retrieve an arbitrarily large number of tweets up to limits set by
the Twitter API, which vary based on the specific type of request.
(warning:  At least as of now there is no protection from overloading the 
API rate limit so be reasonable with your requests).

<<userTimeline2>>=
   cranTweetsLarge <- userTimeline('cranatic', n=100)
   length(cranTweetsLarge)
@

The \Rfunction{homeTimeline} function works nearly identically except you do not
pass in a user, it uses your own timeline.

\subsection{A simple example}

Just a quick example of how one can interact with actual data.  Here we 
will pull the most recent results from the public timeline and see the
clients that were used to post those statuses.  We can look at a pie chart
to get a sense for the most common clients.

Note that sources which are not the standard web interface will be
presented as an anchored URL string (<A>...</A>).  There are more 
efficient means to rip out the anchor string than how it is done 
below, but this is a bit more robust for the purposes of this vignette
due to issues with character encoding, locales, etc.

<<seeSources,fig=TRUE>>=
   r_tweets <- searchTwitter("#rstats", n=300)
   sources <- sapply(r_tweets, function(x) x$getStatusSource())
   sources <- gsub("</a>", "", sources)
   sources <- strsplit(sources, ">")
   sources <- sapply(sources, function(x) ifelse(length(x) > 1, x[2], x[1]))
   source_table = table(sources)
   pie(source_table[source_table > 10])
@ 

\subsection{Conversion to data.frames}

There are times when it is convenient to display the object lists as
an \Robject{data.frame} structure.  To do this, every class has a
reference method \Rfunction{toDataFrame} as well as a corresponding S4
method \Rfunction{as.data.frame} that works in the traditional sense.
Converting a single object will typically not be particularly useful
by itself but there is a convenience method to convert an entire list,
\Rfunction{twListToDF} which takes a list of objects from a single
\Rpackage{twitteR} class:

<<dataFrame>>=
   df <- twListToDF(r_tweets)
   head(df)
@ 

\section{Examples Of twitteR In The Wild}

I've found some examples around the web of people using this package for various
purposes, hopefully some of these can give you good ideas on how to do things. 
Unfortunately I didn't give the package the most easily searched name! If you
know of a good example please let me know.

\begin{itemize}
  \item Jeffrey Breen's sentiment analysis example: \url{http://www.inside-r.org/howto/mining-twitter-airline-consumer-sentiment}
  \item Mapping your followers: \url{http://simplystatistics.org/2011/12/21/an-r-function-to-map-your-twitter-followers/}
  \item Yangchao Zhao's book on data mining w/ R \url{http://www.amazon.com/Data-Mining-Examples-Case-Studies/dp/0123969638}
  \item Gary Miner et al's book on data mining \url{http://www.amazon.com/Practical-Statistical-Analysis-Non-structured-Applications/dp/012386979X}
  \item Mining Twitter with R \url{https://sites.google.com/site/miningtwitter/home}
  \item Organization or conversation in Twitter: A case study of chatterboxing \url{https://www.asis.org/asist2012/proceedings/Submissions/185.pdf}
\end{itemize}

\section{Session Information}

The version number of R and packages loaded for generating the vignette were:

\begin{verbatim}
<<echo=FALSE,results=tex>>=
sessionInfo()
@
\end{verbatim}

\end{document}
