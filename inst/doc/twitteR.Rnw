\documentclass[letter]{article}
%\VignetteIndexEntry{Twitter client for R}
%\VignettePackage{twitteR}
%\VignetteKeywords{Documentation}
\usepackage{url}
\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}
\newcommand{\Rmethod}[1]{{\texttt{#1}}}
\newcommand{\Rfunarg}[1]{{\texttt{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}

\begin{document}

\title{Twitter client for R}
\author{Jeff Gentry}
\maketitle

\section{Disclaimer}

Because vignettes are built at various points of time (often
automatically), and because a lot of the examples are pulling live
data from Twitter at the time of being built, it is possible that some
of the content in the examples of this document will be unsavory.
I've tried to use users and feeds that are unlikely to be this way, but
particularly when looking at the public timeline all bets are off.

\section{Introduction}

Twitter is a popular service that allows users to broadcast short
messages ('\emph{tweets}') for others to read.  These can be used to
communicate wtih friends, to display headlines, for restaurants to
list daily specials, and more.  The \Rpackage{twitteR} package is
intended to provide access to the Twitter API within R.  Users can make 
access large amounts of Twitter  data for data mining and other tasks.  

When joined with the \Rpackage{ROauth} package, this package can be used 
to push the API further and directly interact by posting tweets, dealing 
with direct messages and enjoying enhanced API rate limitations.

\section{Initial Notes}

\subsection{Notes for this version}

The reworking is still underway.  The primary change for this version
has been better support for R-2.14

\subsection{Notes on API coverage}

The ultimate goal is to provide full coverage of the Twitter API, although
this is not currently the case.  Aspects of the API will be added over
time, although if there are particular places that you find missing,
please contact me.

\subsection{Notes on the classes}

There are five classes in this package: \Robject{user}, \Robject{status},
\Robject{trend}, \Robject{rateLImitInfo}, and \Robject{directMessage}.  As of this version they have 
all been implemented as reference classes (see \Rfunction{setRefClass}).  The
first two were previously implemented as S4 classes.  To help maintain
backwards compatibility, the S4 methods (all accessors) have been left
in for those two classes although new code should be using the new style
accessors.

\section{Getting Started}

We'll focus first on those sections of the package that do not require
\Robject{ROAuth} authentication.  The rest of this document won't be
an encyclopedic report on the functionality of the package but will just
show some basic techniques.

<<initialize>>=
library(twitteR)
@

\section{Exploring Twitter}

A Twitter \emph{timeline} is simply a stream of tweets - this might be
the \emph{public timeline} which is comprised of all public tweets, it
might be a user's timeline which would be all of their tweets, or it
might even be a timeline to look at one's friend's tweets.  Just as there 
are various \emph{timelines} in Twitter, the \Rpackage{twitteR} package 
provides various interfaces to access them.  The first and most obvious 
would be the \emph{public timeline}, which retrieves the 20 most 
recent public tweets on Twitter, returned to the user as a list of
\Rclass{status} objects.

<<publicTimeline>>=
   publicTweets <- publicTimeline()
   length(publicTweets)
   publicTweets[1:5]
   publicTweets[[1]]$getScreenName()
   publicTweets[[1]]$getCreated()
   publicTweets[[1]]$getText()
@

Similarly, we can look at a particular user's timeline.   This will
only work properly if that user has a public account or you are 
authenticated and have access to that account, and can take
either a user's name or an object of class \Rclass{user} (more on this
later).  For this example, let's use the user \emph{cranatic}.

<<userTimeline>>=
   cranTweets <- userTimeline('cranatic')
   cranTweets[1:5]
@

By default this command returns the 20 most recent tweet.  
As with most (but not all) of the functions, it also provides a mechanism 
to retrieve an arbitrarily large number of tweets up to limits set by
the Twitter API, which vary based on the specific type of request.
(warning:  At least as of now there is no protection from overloading the 
API rate limit so be reasonable with your requests).

<<<userTimeline2>>=
   cranTweetsLarge <- userTimeline('cranatic', n=100)
   length(cranTweetsLarge)
@

\subsection{Searching Twitter}

The \Rfunction{searchTwitter} function can be used to search for
tweets that match a desired term.  Example searches are such things as hashtags,
@usernames, and other such things which can also be manipulated with
basic boolean logic such as AND and OR.  The \Rfunarg{n} argument
can be used to specify the number of tweets to return, defaulting to 25.

<<search>>=
   sea <- searchTwitter('#twitter', n=50)
   sea[1:5]
@


\subsection{Looking at users}

To take a closer look at a Twitter user (including yourself!), run the
command \Rfunction{getUser}.  This will only work correctly with users
who have their profiles public, or if you're authenticated and granted
access.

<<getUser>>=
   crantastic <- getUser('crantastic')
   crantastic
@

\subsection{Trends}

Twitter keeps track of topics that are popular at any given point of time,
and allows one to extract that data.  We're able to see the 20 trending 
topics per hour for a given day, or the 30 trending topics per day for a given week.

<<trends>>=
   yesterdayTrends <- getTrends('daily', date=as.character(Sys.Date()-1))
   length(yesterdayTrends)
   
   lastWeekTrends <- getTrends('weekly', date=as.character(Sys.Date()-7))
   length(lastWeekTrends)
@ 

\subsection{A simple example}

Just a quick example of how one can interact with actual data.  Here we 
will pull the most recent results from the public timeline and see the
clients that were used to post those statuses.  We can look at a pie chart
to get a sense for the most common clients.

Note that sources which are not the standard web interface will be
presented as an anchored URL string (<A>...</A>).  There are more 
efficient means to rip out the anchor string than how it is done 
below, but this is a bit more robust for the purposes of this vignette
due to issues with character encoding, locales, etc.

<<seeSources,fig=TRUE>>=
   sources <- sapply(publicTweets, function(x) x$getStatusSource())
   sources <- gsub("</a>", "", sources)
   sources <- strsplit(sources, ">")
   sources <- sapply(sources, function(x) ifelse(length(x) > 1, x[2], x[1]))
   pie(table(sources))
@ 

\subsection{Conversion to data.frames}

There are times when it is convenient to display the object lists as
an \Robject{data.frame} structure.  To do this, every class has a
reference method \Rfunction{toDataFrame} as well as a corresponding S4
method \Rfunction{as.data.frame} that works in the traditional sense.
Converting a single object will typically not be particularly useful
by itself but there is a convenience method to convert an entire list,
\Rfunction{twListToDF} which takes a list of objects from a single
\Rpackage{twitteR} class:

<<dataFrame>>=
   df <- twListToDF(publicTweets)
   df[1:3,1:3]
@ 

\section{Authentication with OAuth}

OAuth is an authentication mechanism gaining popularity which allows
applications to provide client functionality to a web service without
granting an end user's credentials to the client itself.  This causes
a few wrinkles for cases like ours, where we're accessing Twitter 
programatically.  The \Rpackage{ROAuth} package can be used to get around
this issue.

The first step is to create a Twitter application for yourself.  Go to
\url{https://twitter.com/apps/new}.  Set the ``Application Type'' as
``Client'', and ``Default Access Type'' as ``Read \& Write''.  This will
provide you with two strings, a consumer key and a consumer secret.  Record 
these for your future use.

Three other pieces of information you will need:
\begin{itemize}
\item \em{requestURL}: \url{https://api.twitter.com/oauth/request_token}
\item \em{accessURL}: \url{http://api.twitter.com/oauth/access_token}
\item \em{authURL}: \url{http://api.twitter.com/oauth/authorize}
\end{itemize}

In your R session, you'll want to do the following:

<<ROAuth,eval=FALSE>>=
   cred <- OAuthFactory$new(consumerKey=YOURKEY,
                            consumerSecret=YOURSECRET,
                            requestURL=requestURL,
                            accessURL=accessURL,
                            authURL=authURL)
   cred$handshake()
@ 

At this point, you'll be prompted with another URL, go to that URL with 
your browser and you'll be asked to approve the connection for this 
application.  Once you do this, you'll be presented with a PIN, enter 
that into your R session.  Your object is now verified.  

The \Robject{OAuth} object, once the handshake is complete, can be saved
to a file and reused.  You should not ever have to redo the handshake
unless you remove authorization within the Twitter website.

\section{Session Information}

The version number of R and packages loaded for generating the vignette were:

\begin{verbatim}
<<echo=FALSE,results=tex>>=
sessionInfo()
@
\end{verbatim}

\end{document}
